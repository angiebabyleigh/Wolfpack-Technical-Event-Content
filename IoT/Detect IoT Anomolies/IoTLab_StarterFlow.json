[{"id":"98a6e2a1.7e266","type":"tab","label":"Start Flow","disabled":false,"info":""},{"id":"380f39ba.dac66e","type":"inject","z":"98a6e2a1.7e266","name":"Voltage Sensor Simulator","topic":"","payload":"{ \"d\": { \"voltage\": 240, \"frequency\": 50 } }","payloadType":"json","repeat":"","crontab":"","once":false,"onceDelay":"","x":172,"y":43,"wires":[["44e38c8c.f771bc"]]},{"id":"44e38c8c.f771bc","type":"function","z":"98a6e2a1.7e266","name":"Voltage data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n msg.payload.d.voltage = Math.floor(Math.random() * (240 - 220) + 220);\n} else {\n msg.payload.d.voltage = Math.floor(Math.random() * (260 - 240) + 240);\n}\nmsg.payload.d.frequency = Math.floor(Math.random() * (80 - 60 + 1) + 60);\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"voltage\"\nglobal.set('voltages',msg.payload.d.voltage);\nreturn msg;","outputs":1,"noerr":0,"x":162,"y":164,"wires":[["95bbf9cf.869c78"]]},{"id":"95bbf9cf.869c78","type":"function","z":"98a6e2a1.7e266","name":"zscore","func":"//initialize a list that stores the last n values for the electric current by using the voltage parameter. In stream computing, this list is called a \"sliding window of fixed size.\" \nvar aggwindow = context.get('aggwindow')||[];\n\n//add values to that lis\naggwindow.push(msg.payload.d.voltage); \n\n//Continue adding values to the list until we have exceeded 30 values, which defines the size of our sliding window. \nif (aggwindow.length> 30) {\n \n //To compute z-score, we need the mean and the standard deviation.\n sum = aggwindow.reduce((a,b)=>a+b,0);\n n = aggwindow.length;\n mean = sum/n;\n sd = Math.sqrt(aggwindow.map(x=>Math.pow(mean-x,2)).reduce((a,b)=>a+b,0));\n \n // get rid of the oldest element in the list, which resembles a LIFO. \n aggwindow.shift();\n \n //Perform Z-Score Calculation. Add a small value to standard deviation because the standard deviation can become zero, which is mathematically undefined\n msg.zscore = (mean-msg.payload.d.voltage)/(sd+0.0001)\n}\n\n//store this list to a global context to preserve it over individual message lifetimes\ncontext.set('aggwindow',aggwindow);\n\n\n//output voltage and zscore\nmsg.payload = {\n [(\"voltage\")]:global.get(\"voltages\"),\n [(\"zscore\")]:Math.abs(msg.zscore)\n }\n\nreturn msg;","outputs":1,"noerr":0,"x":331,"y":164,"wires":[["f6a70b51.a7fce","6384e41.353c19c"]]},{"id":"f6a70b51.a7fce","type":"function","z":"98a6e2a1.7e266","name":"add timestamp","func":"msg.payload.time = new Date().getTime();\nreturn msg;","outputs":1,"noerr":0,"x":520,"y":180,"wires":[["f00f905a.c4bb1"]]},{"id":"1f09ed2e.c41a0b","type":"template","z":"98a6e2a1.7e266","name":"Danger","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"ALERT SHUTDOWN! Z-SCORE: {{payload.zscore}}","output":"str","x":700,"y":40,"wires":[["8edeae8b.e1ff8"]]},{"id":"8edeae8b.e1ff8","type":"debug","z":"98a6e2a1.7e266","name":"Debug","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":830,"y":100,"wires":[]},{"id":"6384e41.353c19c","type":"switch","z":"98a6e2a1.7e266","name":"Voltage Threshold","property":"payload.zscore","propertyType":"msg","rules":[{"t":"eq","v":"","vt":"str"},{"t":"eq","v":"","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":510,"y":60,"wires":[["1f09ed2e.c41a0b"],["8edeae8b.e1ff8"]]},{"id":"f00f905a.c4bb1","type":"ibmiot out","z":"98a6e2a1.7e266","authentication":"quickstart","outputType":"","deviceId":"","deviceType":"","eventCommandType":"","format":"","data":"","qos":0,"name":"IBM IoT","service":"","x":760,"y":220,"wires":[]}]